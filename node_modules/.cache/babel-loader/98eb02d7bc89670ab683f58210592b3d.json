{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nimport cartSlice from \"./cartSlice\";\nimport addSlice from \"./addSlice\"; // const cartSlice = createSlice({\n//   name: \"show\",\n//   initialState: { show: false },\n//   reducers: {\n//     showCart(state, action) {\n//       state.show = !state.show;\n//     },\n//   },\n// });\n// const addSlice = createSlice({\n//   name: \"Add\",\n//   initialState: { items: [], TotalQuantity: 0 },\n//   reducers: {\n//     addItem(state, action) {\n//       const newItem = { ...action.payload.value, quantity: 1 };\n//       const existingItem = state.items.find((item) => item.id === newItem.id);\n//       if (existingItem) {\n//         const upatedItem = {\n//           ...existingItem,\n//           quantity: existingItem.quantity + 1,\n//         };\n//         state.items[state.items.indexOf(existingItem)] = upatedItem;\n//         const updateItems = state.items;\n//         state.items = updateItems;\n//       } else {\n//         state.items = [...state.items, newItem];\n//       }\n//     },\n//     addTotalQuantity(state, action) {\n//       state.TotalQuantity = state.TotalQuantity + 1;\n//     },\n//     removeTotalQuantity(state, action) {\n//       state.TotalQuantity = state.TotalQuantity - 1;\n//     },\n//     removeItem(state, action) {\n//       const removeItem = { ...action.payload.value };\n//       const existingItem = state.items.find(\n//         (item) => item.id === removeItem.id\n//       );\n//       const upatedItem = {\n//         ...existingItem,\n//         quantity: existingItem.quantity - 1,\n//       };\n//       state.items[state.items.indexOf(existingItem)] = upatedItem;\n//       let updateItems;\n//       if (existingItem.quantity === 1) {\n//         updateItems = state.items.filter((ele) => {\n//           return ele.id !== existingItem.id;\n//         });\n//       } else {\n//         updateItems = state.items;\n//       }\n//       state.items = updateItems;\n//     },\n//   },\n// });\n\nconst store = configureStore({\n  reducer: {\n    cart: cartSlice.reducer,\n    add: addSlice.reducer\n  }\n}); // export const showCartActions = cartSlice.actions;\n// export const addActions = addSlice.actions;\n\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","cartSlice","addSlice","store","reducer","cart","add"],"sources":["D:/React2/Redux/Redux/Advanced Redux/01-starting-project/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\nimport cartSlice from \"./cartSlice\";\r\nimport addSlice from \"./addSlice\";\r\n// const cartSlice = createSlice({\r\n//   name: \"show\",\r\n//   initialState: { show: false },\r\n//   reducers: {\r\n//     showCart(state, action) {\r\n//       state.show = !state.show;\r\n//     },\r\n//   },\r\n// });\r\n// const addSlice = createSlice({\r\n//   name: \"Add\",\r\n//   initialState: { items: [], TotalQuantity: 0 },\r\n//   reducers: {\r\n//     addItem(state, action) {\r\n//       const newItem = { ...action.payload.value, quantity: 1 };\r\n//       const existingItem = state.items.find((item) => item.id === newItem.id);\r\n//       if (existingItem) {\r\n//         const upatedItem = {\r\n//           ...existingItem,\r\n//           quantity: existingItem.quantity + 1,\r\n//         };\r\n//         state.items[state.items.indexOf(existingItem)] = upatedItem;\r\n//         const updateItems = state.items;\r\n//         state.items = updateItems;\r\n//       } else {\r\n//         state.items = [...state.items, newItem];\r\n//       }\r\n//     },\r\n\r\n//     addTotalQuantity(state, action) {\r\n//       state.TotalQuantity = state.TotalQuantity + 1;\r\n//     },\r\n//     removeTotalQuantity(state, action) {\r\n//       state.TotalQuantity = state.TotalQuantity - 1;\r\n//     },\r\n\r\n//     removeItem(state, action) {\r\n//       const removeItem = { ...action.payload.value };\r\n//       const existingItem = state.items.find(\r\n//         (item) => item.id === removeItem.id\r\n//       );\r\n//       const upatedItem = {\r\n//         ...existingItem,\r\n//         quantity: existingItem.quantity - 1,\r\n//       };\r\n//       state.items[state.items.indexOf(existingItem)] = upatedItem;\r\n//       let updateItems;\r\n//       if (existingItem.quantity === 1) {\r\n//         updateItems = state.items.filter((ele) => {\r\n//           return ele.id !== existingItem.id;\r\n//         });\r\n//       } else {\r\n//         updateItems = state.items;\r\n//       }\r\n//       state.items = updateItems;\r\n//     },\r\n//   },\r\n// });\r\n\r\nconst store = configureStore({\r\n  reducer: { cart: cartSlice.reducer, add: addSlice.reducer },\r\n});\r\n\r\n// export const showCartActions = cartSlice.actions;\r\n// export const addActions = addSlice.actions;\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC3BI,OAAO,EAAE;IAAEC,IAAI,EAAEJ,SAAS,CAACG,OAAlB;IAA2BE,GAAG,EAAEJ,QAAQ,CAACE;EAAzC;AADkB,CAAD,CAA5B,C,CAIA;AACA;;AACA,eAAeD,KAAf"},"metadata":{},"sourceType":"module"}
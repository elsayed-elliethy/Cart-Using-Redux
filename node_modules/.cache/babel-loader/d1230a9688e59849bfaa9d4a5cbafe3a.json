{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst manageCartSlice = createSlice({\n  name: \"Add\",\n  initialState: {\n    items: [],\n    TotalQuantity: 0\n  },\n  reducers: {\n    addItem(state, action) {\n      const newItem = { ...action.payload.value,\n        quantity: 1\n      };\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.TotalQuantity = state.TotalQuantity + 1;\n\n      if (existingItem) {\n        const upatedItem = { ...existingItem,\n          quantity: existingItem.quantity + 1\n        };\n        state.items[state.items.indexOf(existingItem)] = upatedItem;\n        const updateItems = state.items;\n        state.items = updateItems;\n      } else {\n        // state.items = [...state.items, newItem];\n        state.items.push(newItem);\n      }\n    },\n\n    // addTotalQuantity(state, action) {\n    //   state.TotalQuantity = state.TotalQuantity + 1;\n    // },\n    removeTotalQuantity(state, action) {\n      state.TotalQuantity = state.TotalQuantity - 1;\n    },\n\n    removeItem(state, action) {\n      const removeItem = { ...action.payload.value\n      };\n      const existingItem = state.items.find(item => item.id === removeItem.id);\n      const upatedItem = { ...existingItem,\n        quantity: existingItem.quantity - 1\n      };\n      state.items[state.items.indexOf(existingItem)] = upatedItem;\n      let updateItems;\n\n      if (existingItem.quantity === 1) {\n        updateItems = state.items.filter(ele => {\n          return ele.id !== existingItem.id;\n        });\n      } else {\n        updateItems = state.items;\n      }\n\n      state.items = updateItems;\n    }\n\n  }\n});\nexport const manageCartActions = manageCartSlice.actions;\nexport default manageCartSlice;","map":{"version":3,"names":["createSlice","manageCartSlice","name","initialState","items","TotalQuantity","reducers","addItem","state","action","newItem","payload","value","quantity","existingItem","find","item","id","upatedItem","indexOf","updateItems","push","removeTotalQuantity","removeItem","filter","ele","manageCartActions","actions"],"sources":["D:/React2/Redux/Redux/Advanced Redux/01-starting-project/src/store/manageCartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst manageCartSlice = createSlice({\r\n  name: \"Add\",\r\n  initialState: { items: [], TotalQuantity: 0 },\r\n  reducers: {\r\n    addItem(state, action) {\r\n      const newItem = { ...action.payload.value, quantity: 1 };\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.TotalQuantity = state.TotalQuantity + 1;\r\n      if (existingItem) {\r\n        const upatedItem = {\r\n          ...existingItem,\r\n          quantity: existingItem.quantity + 1,\r\n        };\r\n        state.items[state.items.indexOf(existingItem)] = upatedItem;\r\n        const updateItems = state.items;\r\n        state.items = updateItems;\r\n      } else {\r\n        // state.items = [...state.items, newItem];\r\n        state.items.push(newItem);\r\n      }\r\n    },\r\n\r\n    // addTotalQuantity(state, action) {\r\n    //   state.TotalQuantity = state.TotalQuantity + 1;\r\n    // },\r\n    removeTotalQuantity(state, action) {\r\n      state.TotalQuantity = state.TotalQuantity - 1;\r\n    },\r\n\r\n    removeItem(state, action) {\r\n      const removeItem = { ...action.payload.value };\r\n      const existingItem = state.items.find(\r\n        (item) => item.id === removeItem.id\r\n      );\r\n      const upatedItem = {\r\n        ...existingItem,\r\n        quantity: existingItem.quantity - 1,\r\n      };\r\n      state.items[state.items.indexOf(existingItem)] = upatedItem;\r\n      let updateItems;\r\n      if (existingItem.quantity === 1) {\r\n        updateItems = state.items.filter((ele) => {\r\n          return ele.id !== existingItem.id;\r\n        });\r\n      } else {\r\n        updateItems = state.items;\r\n      }\r\n      state.items = updateItems;\r\n    },\r\n  },\r\n});\r\n\r\nexport const manageCartActions = manageCartSlice.actions;\r\nexport default manageCartSlice;\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,eAAe,GAAGD,WAAW,CAAC;EAClCE,IAAI,EAAE,KAD4B;EAElCC,YAAY,EAAE;IAAEC,KAAK,EAAE,EAAT;IAAaC,aAAa,EAAE;EAA5B,CAFoB;EAGlCC,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACrB,MAAMC,OAAO,GAAG,EAAE,GAAGD,MAAM,CAACE,OAAP,CAAeC,KAApB;QAA2BC,QAAQ,EAAE;MAArC,CAAhB;MACA,MAAMC,YAAY,GAAGN,KAAK,CAACJ,KAAN,CAAYW,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,OAAO,CAACO,EAA/C,CAArB;MACAT,KAAK,CAACH,aAAN,GAAsBG,KAAK,CAACH,aAAN,GAAsB,CAA5C;;MACA,IAAIS,YAAJ,EAAkB;QAChB,MAAMI,UAAU,GAAG,EACjB,GAAGJ,YADc;UAEjBD,QAAQ,EAAEC,YAAY,CAACD,QAAb,GAAwB;QAFjB,CAAnB;QAIAL,KAAK,CAACJ,KAAN,CAAYI,KAAK,CAACJ,KAAN,CAAYe,OAAZ,CAAoBL,YAApB,CAAZ,IAAiDI,UAAjD;QACA,MAAME,WAAW,GAAGZ,KAAK,CAACJ,KAA1B;QACAI,KAAK,CAACJ,KAAN,GAAcgB,WAAd;MACD,CARD,MAQO;QACL;QACAZ,KAAK,CAACJ,KAAN,CAAYiB,IAAZ,CAAiBX,OAAjB;MACD;IACF,CAjBO;;IAmBR;IACA;IACA;IACAY,mBAAmB,CAACd,KAAD,EAAQC,MAAR,EAAgB;MACjCD,KAAK,CAACH,aAAN,GAAsBG,KAAK,CAACH,aAAN,GAAsB,CAA5C;IACD,CAxBO;;IA0BRkB,UAAU,CAACf,KAAD,EAAQC,MAAR,EAAgB;MACxB,MAAMc,UAAU,GAAG,EAAE,GAAGd,MAAM,CAACE,OAAP,CAAeC;MAApB,CAAnB;MACA,MAAME,YAAY,GAAGN,KAAK,CAACJ,KAAN,CAAYW,IAAZ,CAClBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYM,UAAU,CAACN,EADd,CAArB;MAGA,MAAMC,UAAU,GAAG,EACjB,GAAGJ,YADc;QAEjBD,QAAQ,EAAEC,YAAY,CAACD,QAAb,GAAwB;MAFjB,CAAnB;MAIAL,KAAK,CAACJ,KAAN,CAAYI,KAAK,CAACJ,KAAN,CAAYe,OAAZ,CAAoBL,YAApB,CAAZ,IAAiDI,UAAjD;MACA,IAAIE,WAAJ;;MACA,IAAIN,YAAY,CAACD,QAAb,KAA0B,CAA9B,EAAiC;QAC/BO,WAAW,GAAGZ,KAAK,CAACJ,KAAN,CAAYoB,MAAZ,CAAoBC,GAAD,IAAS;UACxC,OAAOA,GAAG,CAACR,EAAJ,KAAWH,YAAY,CAACG,EAA/B;QACD,CAFa,CAAd;MAGD,CAJD,MAIO;QACLG,WAAW,GAAGZ,KAAK,CAACJ,KAApB;MACD;;MACDI,KAAK,CAACJ,KAAN,GAAcgB,WAAd;IACD;;EA7CO;AAHwB,CAAD,CAAnC;AAoDA,OAAO,MAAMM,iBAAiB,GAAGzB,eAAe,CAAC0B,OAA1C;AACP,eAAe1B,eAAf"},"metadata":{},"sourceType":"module"}